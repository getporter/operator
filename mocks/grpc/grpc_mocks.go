// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	installationv1alpha1 "get.porter.sh/porter/gen/proto/go/porterapis/installation/v1alpha1"

	mock "github.com/stretchr/testify/mock"
)

// PorterClient is an autogenerated mock type for the PorterClient type
type PorterClient struct {
	mock.Mock
}

// ListInstallationLatestOutputs provides a mock function with given fields: ctx, in, opts
func (_m *PorterClient) ListInstallationLatestOutputs(ctx context.Context, in *installationv1alpha1.ListInstallationLatestOutputRequest, opts ...grpc.CallOption) (*installationv1alpha1.ListInstallationLatestOutputResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *installationv1alpha1.ListInstallationLatestOutputResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *installationv1alpha1.ListInstallationLatestOutputRequest, ...grpc.CallOption) (*installationv1alpha1.ListInstallationLatestOutputResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *installationv1alpha1.ListInstallationLatestOutputRequest, ...grpc.CallOption) *installationv1alpha1.ListInstallationLatestOutputResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*installationv1alpha1.ListInstallationLatestOutputResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *installationv1alpha1.ListInstallationLatestOutputRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInstallations provides a mock function with given fields: ctx, in, opts
func (_m *PorterClient) ListInstallations(ctx context.Context, in *installationv1alpha1.ListInstallationsRequest, opts ...grpc.CallOption) (*installationv1alpha1.ListInstallationsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *installationv1alpha1.ListInstallationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *installationv1alpha1.ListInstallationsRequest, ...grpc.CallOption) (*installationv1alpha1.ListInstallationsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *installationv1alpha1.ListInstallationsRequest, ...grpc.CallOption) *installationv1alpha1.ListInstallationsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*installationv1alpha1.ListInstallationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *installationv1alpha1.ListInstallationsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPorterClient creates a new instance of PorterClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPorterClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *PorterClient {
	mock := &PorterClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
